const __vite__mapDeps=(i,m=__vite__mapDeps,d=(m.f||(m.f=["_astro/CircleWarp.DAbnHuCj.js","_astro/Circle.BsfAXaX2.js","_astro/sparkTitle.DCU_Odjx.js","_astro/cn.Bh4i3_zX.js","_astro/index.NEDEFKed.js","_astro/motion.DhRAmCJf.js"])))=>i.map(i=>d[i]);
import{S as x,_ as w,V as g}from"./sparkTitle.DCU_Odjx.js";import{Links as _}from"./index.0DQ8XPyZ.js";import{P as D}from"./ParticlesInteractorBase.vfDeBun3.js";import{C as P}from"./Circle.BsfAXaX2.js";import"./cn.Bh4i3_zX.js";import"./index.NEDEFKed.js";import"./motion.DhRAmCJf.js";import"./OptionsColor.BuOxyFYl.js";const h=2,b=1,d={x:0,y:0},O=0;function L(y,i,n,s,t){const{dx:e,dy:c,distance:r}=g(y,i);if(!t||r<=n)return r;const a={x:Math.abs(e),y:Math.abs(c)},l={x:Math.min(a.x,s.width-a.x),y:Math.min(a.y,s.height-a.y)};return Math.sqrt(l.x**h+l.y**h)}class W extends D{constructor(i){super(i),this._setColor=n=>{if(!n.options.links)return;const s=this.linkContainer,t=n.options.links;let e=t.id===void 0?s.particles.linksColor:s.particles.linksColors.get(t.id);if(e)return;const c=t.color;e=x(c,t.blink,t.consent),t.id===void 0?s.particles.linksColor=e:s.particles.linksColors.set(t.id,e)},this.linkContainer=i}clear(){}init(){this.linkContainer.particles.linksColor=void 0,this.linkContainer.particles.linksColors=new Map}async interact(i){if(!i.options.links)return;i.links=[];const n=i.getPosition(),s=this.container,t=s.canvas.size;if(n.x<d.x||n.y<d.y||n.x>t.width||n.y>t.height)return;const e=i.options.links,c=e.opacity,r=i.retina.linksDistance??O,a=e.warp;let l;if(a){const{CircleWarp:o}=await w(async()=>{const{CircleWarp:p}=await import("./CircleWarp.DAbnHuCj.js");return{CircleWarp:p}},__vite__mapDeps([0,1,2,3,4,5]));l=new o(n.x,n.y,r,t)}else l=new P(n.x,n.y,r);const m=s.particles.quadTree.query(l);for(const o of m){const p=o.options.links;if(i===o||!p?.enable||e.id!==p.id||o.spawning||o.destroyed||!o.links||i.links.some(f=>f.destination===o)||o.links.some(f=>f.destination===i))continue;const k=o.getPosition();if(k.x<d.x||k.y<d.y||k.x>t.width||k.y>t.height)continue;const u=L(n,k,r,t,a&&p.warp);if(u>r)continue;const C=(b-u/r)*c;this._setColor(i),i.links.push({destination:o,opacity:C})}}isEnabled(i){return!!i.options.links?.enable}loadParticlesOptions(i,...n){i.links||(i.links=new _);for(const s of n)i.links.load(s?.links)}reset(){}}export{W as Linker};
