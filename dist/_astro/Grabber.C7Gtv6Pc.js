import{Grab as f}from"./index.DiIDwe4u.js";import{f as v}from"./CanvasUtils.5nKfh4B1.js";import{n as y,t as k,E as L,S as O,T as h,J as C}from"./sparkTitle.DCU_Odjx.js";import{E as w}from"./ExternalInteractorBase.CIi3zRdK.js";import"./OptionsColor.BuOxyFYl.js";import"./cn.Bh4i3_zX.js";import"./index.NEDEFKed.js";import"./motion.DhRAmCJf.js";const E=0;function D(r,t,i,n,o,e){v(r,i,n),r.strokeStyle=y(o,e),r.lineWidth=t,r.stroke()}function M(r,t,i,n,o){r.canvas.draw(e=>{const s=t.getPosition();D(e,t.retina.linksWidth??E,s,o,i,n)})}const P="grab",G=0,q=0;class B extends w{constructor(t){super(t)}clear(){}init(){const t=this.container,i=t.actualOptions.interactivity.modes.grab;i&&(t.retina.grabModeDistance=i.distance*t.retina.pixelRatio)}async interact(){const t=this.container,i=t.actualOptions,n=i.interactivity;if(!n.modes.grab||!n.events.onHover.enable||t.interactivity.status!==k)return;const o=t.interactivity.mouse.position;if(!o)return;const e=t.retina.grabModeDistance;if(!e||e<G)return;const s=t.particles.quadTree.queryCircle(o,e,a=>this.isEnabled(a));for(const a of s){const g=a.getPosition(),c=L(g,o);if(c>e)continue;const l=n.modes.grab.links,p=l.opacity,b=p-c*p/e;if(b<=q)continue;const d=l.color??a.options.links?.color;if(!t.particles.grabLineColor&&d){const u=n.modes.grab.links;t.particles.grabLineColor=O(d,u.blink,u.consent)}const m=h(a,void 0,t.particles.grabLineColor);m&&M(t,a,m,b,o)}await Promise.resolve()}isEnabled(t){const i=this.container,n=i.interactivity.mouse,o=(t?.interactivity??i.actualOptions.interactivity).events;return o.onHover.enable&&!!n.position&&C(P,o.onHover.mode)}loadModeOptions(t,...i){t.grab||(t.grab=new f);for(const n of i)t.grab.load(n?.grab)}reset(){}}export{B as Grabber};
